Project Documentation - REST API with Express.js & MongoDB
Introduction
This project is a REST API built using Express.js and integrated with MongoDB via Mongoose. The API provides endpoints for managing users and courses, utilizing JWT authentication to secure access to protected resources. The application follows CRUD (Create, Read, Update, Delete) operations and includes file uploads for user avatars.

Base URL
All API endpoints should be prefixed with the following base URL:

https://satisfactory-teddy-abdalrhmangroup-f18e5404.koyeb.app/api/
Technologies Used
Node.js – JavaScript runtime environment for backend development.
Express.js – Web framework for building APIs.
MongoDB & Mongoose – NoSQL database and ODM (Object Data Modeling) library.
JWT (jsonwebtoken) – Secure authentication mechanism using JSON Web Tokens.
bcrypt.js – Secure password hashing.
dotenv – Loads environment variables from a .env file.
morgan – HTTP request logger for debugging.
CORS – Middleware for handling Cross-Origin Resource Sharing.
Multer – Middleware for handling file uploads.
Project Setup
1. Install Dependencies
To install the required dependencies, run:

npm install express mongoose dotenv jsonwebtoken bcryptjs cors morgan multer
2. Environment Variables
Create a .env file in the root directory and define the following variables:

MONGO_URL=your_mongodb_connection_string
JSONWEBTOKEN_SECRET_KEY=your_secret_key
PORT=5000
3. Start the Server
Run the following command to start the API server:

node index.js
The API will be available at http://localhost:5000.

API Endpoints
1. Course Management
1.1. Get All Courses
Endpoint: GET /api/courses
Authentication: Not required
Query Parameters:
limit (optional) - Number of courses per page.
page (optional) - Page number for pagination.
Description: Retrieves a paginated list of courses.
Response Example:
{
  "status": "success",
  "data": { "courses": [...] }
}
1.2. Get a Single Course
Endpoint: GET /api/courses/:courseId
Authentication: Not required
Description: Fetches course details by its unique ID.
Response If Not Found:
{ "msg": "course is not found" }
1.3. Create a New Course
Endpoint: POST /api/courses
Authentication: Required (JWT Token)
Access Role: ADMIN or MANAGER
Description: Creates a new course and saves it to the database.
Response Example:
{
  "status": "success",
  "data": { "newCourse": {...} }
}
1.4. Update a Course
Endpoint: PATCH /api/courses/:courseId
Authentication: Required (JWT Token)
Description: Updates an existing course.
1.5. Delete a Course
Endpoint: DELETE /api/courses/:courseId
Authentication: Required (JWT Token)
Access Role: ADMIN or MANAGER
Description: Deletes a course by its ID.
2. User Management
2.1. Get All Users
Endpoint: GET /api/users
Authentication: Required (JWT Token)
Description: Retrieves all users while excluding their passwords.
2.2. User Registration
Endpoint: POST /api/users/register
Authentication: Not required
Description: Registers a new user, hashes their password, and generates a JWT token.
Response Example:
{
  "status": "success",
  "msg": "User registered successfully",
  "data": { "user": {...} }
}
2.3. User Login
Endpoint: POST /api/users/login
Authentication: Not required
Description: Authenticates users and returns a JWT token.
Error Response (Invalid Credentials):
{
  "status": "ERROR",
  "msg": "Incorrect email or password"
}
File Uploads
Multer is used to handle file uploads.
Allowed File Types: JPEG, PNG.
File Size Limit: 5MB.
Upload Destination: uploads/ directory.
Example Usage: Avatar upload during user registration.
Authentication & Authorization
JWT Authentication:

Users receive a JWT token upon registration or login.
The token must be included in the Authorization Header.
Example:
Authorization: Bearer <your_token>
Tokens are verified using jsonwebtoken.verify().
Role-Based Access Control (RBAC):

Only ADMIN and MANAGER roles can create or delete courses.
Middleware verifyToken and allowedTo handle access control.
Error Handling
Validation Errors:
Missing or incorrect fields return a 400 Bad Request.
Unauthorized Access:
Invalid or missing tokens return a 401 Unauthorized.
Resource Not Found:
Invalid course or user IDs return a 404 Not Found.
Unhandled Routes:
Any unknown API request returns a 404 Resource Not Found.
Running & Testing the API
Ensure .env is correctly set up.
Start the server:
node index.js
Use Postman or similar tools to test API requests.
Conclusion
This REST API provides a secure, scalable, and efficient way to manage courses and users. It includes authentication, authorization, file uploads, and structured error handling to ensure reliability in production environments.